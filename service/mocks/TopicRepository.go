package mocks

import (
	"context"

	"github.com/edwinjordan/ZOGTest-Golang.git/domain"
	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

func NewTopicRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TopicRepository {
	mock := &TopicRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRepository is an autogenerated mock type for the UserRepository type
type TopicRepository struct {
	mock.Mock
}

type TopicRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TopicRepository) EXPECT() *TopicRepository_Expecter {
	return &TopicRepository_Expecter{mock: &_m.Mock}
}

// CreateTopic provides a mock function for the type UserRepository
func (_mock *TopicRepository) CreateTopic(ctx context.Context, topic *domain.CreateTopicRequest) (*domain.Topic, error) {
	ret := _mock.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 *domain.Topic
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CreateTopicRequest) (*domain.Topic, error)); ok {
		return returnFunc(ctx, topic)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CreateTopicRequest) *domain.Topic); ok {
		r0 = returnFunc(ctx, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Topic)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.CreateTopicRequest) error); ok {
		r1 = returnFunc(ctx, topic)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TopicRepository_CreateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTopic'
type TopicRepository_CreateTopic_Call struct {
	*mock.Call
}

// CreateTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.CreateTopicRequest
func (_e *TopicRepository_Expecter) CreateTopic(ctx interface{}, topic interface{}) *TopicRepository_CreateTopic_Call {
	return &TopicRepository_CreateTopic_Call{Call: _e.mock.On("CreateTopic", ctx, topic)}
}

func (_c *TopicRepository_CreateTopic_Call) Run(run func(ctx context.Context, topic *domain.CreateTopicRequest)) *TopicRepository_CreateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.CreateTopicRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.CreateTopicRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TopicRepository_CreateTopic_Call) Return(topic1 *domain.Topic, err error) *TopicRepository_CreateTopic_Call {
	_c.Call.Return(topic1, err)
	return _c
}

func (_c *TopicRepository_CreateTopic_Call) RunAndReturn(run func(ctx context.Context, topic *domain.CreateTopicRequest) (*domain.Topic, error)) *TopicRepository_CreateTopic_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTopic provides a mock function for the type TopicRepository
func (_mock *TopicRepository) DeleteTopic(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TopicRepository_DeleteTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTopic'
type TopicRepository_DeleteTopic_Call struct {
	*mock.Call
}

// DeleteTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *TopicRepository_Expecter) DeleteTopic(ctx interface{}, id interface{}) *TopicRepository_DeleteTopic_Call {
	return &TopicRepository_DeleteTopic_Call{Call: _e.mock.On("DeleteTopic", ctx, id)}
}

func (_c *TopicRepository_DeleteTopic_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TopicRepository_DeleteTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TopicRepository_DeleteTopic_Call) Return(err error) *TopicRepository_DeleteTopic_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TopicRepository_DeleteTopic_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *TopicRepository_DeleteTopic_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopic provides a mock function for the type TopicRepository
func (_mock *TopicRepository) GetTopic(ctx context.Context, id uuid.UUID) (*domain.Topic, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 *domain.Topic
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Topic, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Topic); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Topic)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TopicRepository_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type TopicRepository_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *TopicRepository_Expecter) GetTopic(ctx interface{}, id interface{}) *TopicRepository_GetTopic_Call {
	return &TopicRepository_GetTopic_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *TopicRepository_GetTopic_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TopicRepository_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TopicRepository_GetTopic_Call) Return(topic *domain.Topic, err error) *TopicRepository_GetTopic_Call {
	_c.Call.Return(topic, err)
	return _c
}

func (_c *TopicRepository_GetTopic_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.Topic, error)) *TopicRepository_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopicList provides a mock function for the type TopicRepository
func (_mock *TopicRepository) GetTopicList(ctx context.Context, filter *domain.TopicFilter) ([]domain.Topic, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetTopicList")
	}

	var r0 []domain.Topic
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.TopicFilter) ([]domain.Topic, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.TopicFilter) []domain.Topic); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Topic)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.TopicFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TopicRepository_GetTopicList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopicList'
type TopicRepository_GetTopicList_Call struct {
	*mock.Call
}

// GetTopicList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.TopicFilter
func (_e *TopicRepository_Expecter) GetTopicList(ctx interface{}, filter interface{}) *TopicRepository_GetTopicList_Call {
	return &TopicRepository_GetTopicList_Call{Call: _e.mock.On("GetTopicList", ctx, filter)}
}

func (_c *TopicRepository_GetTopicList_Call) Run(run func(ctx context.Context, filter *domain.TopicFilter)) *TopicRepository_GetTopicList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.TopicFilter
		if args[1] != nil {
			arg1 = args[1].(*domain.TopicFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TopicRepository_GetTopicList_Call) Return(topics []domain.Topic, err error) *TopicRepository_GetTopicList_Call {
	_c.Call.Return(topics, err)
	return _c
}

func (_c *TopicRepository_GetTopicList_Call) RunAndReturn(run func(ctx context.Context, filter *domain.TopicFilter) ([]domain.Topic, error)) *TopicRepository_GetTopicList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTopic provides a mock function for the type TopicRepository
func (_mock *TopicRepository) UpdateTopic(ctx context.Context, id uuid.UUID, topic *domain.Topic) (*domain.Topic, error) {
	ret := _mock.Called(ctx, id, topic)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTopic")
	}

	var r0 *domain.Topic
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.Topic) (*domain.Topic, error)); ok {
		return returnFunc(ctx, id, topic)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.Topic) *domain.Topic); ok {
		r0 = returnFunc(ctx, id, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Topic)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *domain.Topic) error); ok {
		r1 = returnFunc(ctx, id, topic)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TopicRepository_UpdateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTopic'
type TopicRepository_UpdateTopic_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - user *domain.User
func (_e *TopicRepository_Expecter) UpdateTopic(ctx interface{}, id interface{}, topic interface{}) *TopicRepository_UpdateTopic_Call {
	return &TopicRepository_UpdateTopic_Call{Call: _e.mock.On("UpdateTopic", ctx, id, topic)}
}

func (_c *TopicRepository_UpdateTopic_Call) Run(run func(ctx context.Context, id uuid.UUID, topic *domain.Topic)) *TopicRepository_UpdateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *domain.Topic
		if args[2] != nil {
			arg2 = args[2].(*domain.Topic)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *TopicRepository_UpdateTopic_Call) Return(topic1 *domain.Topic, err error) *TopicRepository_UpdateTopic_Call {
	_c.Call.Return(topic1, err)
	return _c
}

func (_c *TopicRepository_UpdateTopic_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, topic *domain.Topic) (*domain.Topic, error)) *TopicRepository_UpdateTopic_Call {
	_c.Call.Return(run)
	return _c
}
