package mocks

import (
	"context"

	"github.com/edwinjordan/ZOGTest-Golang.git/domain"
	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

func NewNewsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewsRepository {
	mock := &NewsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRepository is an autogenerated mock type for the UserRepository type
type NewsRepository struct {
	mock.Mock
}

type NewsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NewsRepository) EXPECT() *NewsRepository_Expecter {
	return &NewsRepository_Expecter{mock: &_m.Mock}
}

// CreateTopic provides a mock function for the type UserRepository
func (_mock *NewsRepository) CreateNews(ctx context.Context, news *domain.CreateNewsRequest) (*domain.News, error) {
	ret := _mock.Called(ctx, news)

	if len(ret) == 0 {
		panic("no return value specified for CreateNews")
	}

	var r0 *domain.News
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CreateNewsRequest) (*domain.News, error)); ok {
		return returnFunc(ctx, news)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CreateNewsRequest) *domain.News); ok {
		r0 = returnFunc(ctx, news)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.News)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.CreateNewsRequest) error); ok {
		r1 = returnFunc(ctx, news)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TopicRepository_CreateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTopic'
type NewsRepository_CreateNews_Call struct {
	*mock.Call
}

// CreateTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.CreateTopicRequest
func (_e *NewsRepository_Expecter) CreateNews(ctx interface{}, news interface{}) *NewsRepository_CreateNews_Call {
	return &NewsRepository_CreateNews_Call{Call: _e.mock.On("CreateNews", ctx, news)}
}

func (_c *NewsRepository_CreateNews_Call) Run(run func(ctx context.Context, news *domain.CreateNewsRequest)) *NewsRepository_CreateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.CreateNewsRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.CreateNewsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *NewsRepository_CreateNews_Call) Return(news1 *domain.News, err error) *NewsRepository_CreateNews_Call {
	_c.Call.Return(news1, err)
	return _c
}

func (_c *NewsRepository_CreateNews_Call) RunAndReturn(run func(ctx context.Context, news *domain.CreateNewsRequest) (*domain.News, error)) *NewsRepository_CreateNews_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTopic provides a mock function for the type TopicRepository
func (_mock *NewsRepository) DeleteNews(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNews")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TopicRepository_DeleteTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTopic'
type NewsRepository_DeleteNews_Call struct {
	*mock.Call
}

// DeleteTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *NewsRepository_Expecter) DeleteNews(ctx interface{}, id interface{}) *NewsRepository_DeleteNews_Call {
	return &NewsRepository_DeleteNews_Call{Call: _e.mock.On("DeleteNews", ctx, id)}
}

func (_c *NewsRepository_DeleteNews_Call) Run(run func(ctx context.Context, id uuid.UUID)) *NewsRepository_DeleteNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *NewsRepository_DeleteNews_Call) Return(err error) *NewsRepository_DeleteNews_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *NewsRepository_DeleteNews_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *NewsRepository_DeleteNews_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopic provides a mock function for the type TopicRepository
func (_mock *NewsRepository) GetNews(ctx context.Context, id uuid.UUID) (*domain.News, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNews")
	}

	var r0 *domain.News
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.News, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.News); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.News)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TopicRepository_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type NewsRepository_GetNews_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *NewsRepository_Expecter) GetTopic(ctx interface{}, id interface{}) *NewsRepository_GetNews_Call {
	return &NewsRepository_GetNews_Call{Call: _e.mock.On("GetNews", ctx, id)}
}

func (_c *NewsRepository_GetNews_Call) Run(run func(ctx context.Context, id uuid.UUID)) *NewsRepository_GetNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *NewsRepository_GetNews_Call) Return(topic *domain.News, err error) *NewsRepository_GetNews_Call {
	_c.Call.Return(topic, err)
	return _c
}

func (_c *NewsRepository_GetNews_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.News, error)) *NewsRepository_GetNews_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopicList provides a mock function for the type TopicRepository
func (_mock *NewsRepository) GetNewsList(ctx context.Context, filter *domain.NewsFilter) ([]domain.News, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetNewsList")
	}

	var r0 []domain.News
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.NewsFilter) ([]domain.News, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.NewsFilter) []domain.News); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.News)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.NewsFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TopicRepository_GetTopicList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopicList'
type NewsRepository_GetNewsList_Call struct {
	*mock.Call
}

// GetTopicList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.TopicFilter
func (_e *NewsRepository_Expecter) GetNewsList(ctx interface{}, filter interface{}) *NewsRepository_GetNewsList_Call {
	return &NewsRepository_GetNewsList_Call{Call: _e.mock.On("GetNewsList", ctx, filter)}
}

func (_c *NewsRepository_GetNewsList_Call) Run(run func(ctx context.Context, filter *domain.NewsFilter)) *NewsRepository_GetNewsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.NewsFilter
		if args[1] != nil {
			arg1 = args[1].(*domain.NewsFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *NewsRepository_GetNewsList_Call) Return(news []domain.News, err error) *NewsRepository_GetNewsList_Call {
	_c.Call.Return(news, err)
	return _c
}

func (_c *NewsRepository_GetNewsList_Call) RunAndReturn(run func(ctx context.Context, filter *domain.NewsFilter) ([]domain.News, error)) *NewsRepository_GetNewsList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTopic provides a mock function for the type TopicRepository
func (_mock *NewsRepository) UpdateNews(ctx context.Context, id uuid.UUID, news *domain.News) (*domain.News, error) {
	ret := _mock.Called(ctx, id, news)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNews")
	}

	var r0 *domain.News
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.News) (*domain.News, error)); ok {
		return returnFunc(ctx, id, news)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.News) *domain.News); ok {
		r0 = returnFunc(ctx, id, news)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.News)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *domain.News) error); ok {
		r1 = returnFunc(ctx, id, news)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TopicRepository_UpdateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTopic'
type NewsRepository_UpdateNews_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - user *domain.User
func (_e *NewsRepository_Expecter) UpdateNews(ctx interface{}, id interface{}, news interface{}) *NewsRepository_UpdateNews_Call {
	return &NewsRepository_UpdateNews_Call{Call: _e.mock.On("UpdateNews", ctx, id, news)}
}

func (_c *NewsRepository_UpdateNews_Call) Run(run func(ctx context.Context, id uuid.UUID, news *domain.News)) *NewsRepository_UpdateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *domain.News
		if args[2] != nil {
			arg2 = args[2].(*domain.News)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *NewsRepository_UpdateNews_Call) Return(news1 *domain.News, err error) *NewsRepository_UpdateNews_Call {
	_c.Call.Return(news1, err)
	return _c
}

func (_c *NewsRepository_UpdateNews_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, news *domain.News) (*domain.News, error)) *NewsRepository_UpdateNews_Call {
	_c.Call.Return(run)
	return _c
}
